open Areadppm
open Images

let files = ref []

let pi = 4.0 *. atan 1.0;;
let edge = 16777215;

  let non_max_get_value img color theta = fun x y ->

    let out= ref 0 in
    match theta with

    | 0 -> if (color >= (Rgb24.get img (x) (y+1)) &&
               (color >= (Rgb24.get img (x) (y-1)))) then
        out:= color
      else 
        out:= 0

    | 45 -> if (color >= (Rgb24.get img (x-1) (y+1)) &&
                (color >= (Rgb24.get img (x+1) (y-1)))) then
        out:= color
      else 
        out:= 0

    | 90 -> if (color >= (Rgb24.get img (x-1) (y)) &&
                (color >= (Rgb24.get img (x+1) (y)))) then
        out:= color
      else 
        out:= 0

    | 135 -> if (color >= (Rgb24.get img (x-1) (y-1)) &&
                 (color >= (Rgb24.get img (x+1) (y+1)))) then
        out:= color
      else 
        out:= 0
    | _ -> None
             (!out)
;;

let color_to_rgb c =
  let r = c / 65536 and g = c / 256 mod 256 and b = c mod 256 in
  (r,g,b)
;;
let read_ascii_24 c =
  (c.r * 256 + c.g) * 256 + c.b;
;;

let color_to_float (r,g,b) =
  (r *. 256. +. g) *. 256. +. b;
;;



let_=
Arg.parse ([]) (fun s -> files :=  s:: !files  ) "";
Random.self_init();
let args = List.rev !files in
let id, st, file1, angle = match args with 
  | [id; st; file1; angle] -> id, st, file1, angle
  | _ -> failwith "args error"
in

let start = Unix.gettimeofday () in

let img = load_ppm file1 in
let height = img.Rgb24.height in
let width = img.Rgb24.width  in


let list = Str.split (Str.regexp "Sobel") file1 in
let name, ext= match list with 
  | [name; ext] -> name, ext
  | _ -> failwith " error "
in
let sortie = name^"Non-max.ppm" in


let oc = open_out sortie in 
Printf.fprintf oc "P6\n" ;
Printf.fprintf oc "%d %d \n"  (width-2) (height-2) ;
Printf.fprintf oc "%d\n" 255;


for i=1 to height-2 do
  for j=1 to width-2 do

    let color =  read_ascii_24 ( Rgb24.get img j i) in



  done;
done;

let t1 = Unix.gettimeofday () in





let oc = open_out "Erelation.txt" in
begin
  Printf.fprintf oc "ID;START;ACTTIME;IMG1\n";
  Printf.fprintf oc "%s;" id;
  Printf.fprintf oc "%s;" st;
  Printf.fprintf oc "%F;" (t1 -. start);
  Printf.fprintf oc "%s\n" sortie;
  close_out oc;
end



